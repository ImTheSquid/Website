<canvas id="dotCanvas" transition:persist></canvas>

<script>
  import { DotCanvas } from "@lib/dots";
  let rootContent = document.getElementById("root-content");
  const canvas = document.getElementById("dotCanvas") as HTMLCanvasElement;
  const dots = new DotCanvas(canvas);

  function calcCanvas() {
    rootContent = document.getElementById("root-content");
    if (!rootContent) {
      throw new Error("No root content!");
    }
    const scrollWidth = rootContent.scrollWidth ?? 0;
    const scrollHeight = rootContent.scrollHeight ?? 0;
    canvas.width = Math.max(scrollWidth, window.innerWidth) - 1;
    canvas.height = Math.max(scrollHeight, window.innerHeight) - 1;
  }

  calcCanvas();

  let mouseX = -1000;
  let mouseY = -1000;

  // Update mouse position
  document.addEventListener("mousemove", (e) => {
    mouseX = e.clientX;
    mouseY = e.clientY;
  });

  window.addEventListener("resize", () => {
    calcCanvas();
    dots.generateDots();
  });

  document.addEventListener("astro:page-load", () => {
    calcCanvas();
    dots.generateDots();
  });

  let currentBox: Element | null = null;

  document.addEventListener("dotenter", (e) => {
    const { detail } = e as CustomEvent;
    const elem = detail as Element;
    currentBox = elem;
  });

  document.addEventListener("dotleave", (e) => {
    const { detail } = e as CustomEvent;
    const elem = detail as Element;
    if (elem === currentBox) {
      currentBox = null;
    }
  });

  let isDarkMode =
    window.matchMedia &&
    window.matchMedia("(prefers-color-scheme: dark)").matches;
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (event) => {
      isDarkMode = event.matches;
    });

  // Render loop
  let lastFrameTime = 0;
  function render(dt: DOMHighResTimeStamp) {
    const delta = (dt - lastFrameTime) * 5e-3; // Calculate time delta
    lastFrameTime = dt; // Update the last frame time

    dots.render({
      box:
        currentBox !== null
          ? {
              top: currentBox.getBoundingClientRect().top + window.scrollY,
              bottom:
                currentBox.getBoundingClientRect().bottom + window.scrollY,
              left: currentBox.getBoundingClientRect().left + window.scrollX,
              right: currentBox.getBoundingClientRect().right + window.scrollX,
            }
          : null,
      isDarkMode,
      delta,
      mouseX: mouseX + window.scrollX,
      mouseY: mouseY + window.scrollY,
    });

    requestAnimationFrame(render);
  }
  render(0);
</script>

<style>
  #dotCanvas {
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    pointer-events: none;
    filter: blur(7px);
    overflow: hidden;
  }
</style>
